# Chunk 2
libraries<-c("tidyverse", "readxl", "PKPDmisc", "PKNCA","tableone", "lubridate", "BEQR")
loadlibraries<-lapply(libraries, require, character.only=TRUE)
rm(loadlibraries, libraries)
devtools::load_all()
# Chunk 3
beqrdata<-read.csv("../data/beqrpkdataset.csv", stringsAsFactors = FALSE)
# Chunk 4
base_mean_plot(df=beqrdata, treatment = "TREATMENT", time = "TAD", dv = "CONC")+
labs(x = "TIME", y="Conc(ng/mL)")+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(x="Time (hours)", y = "Concentrations (ng/mL)")+
facet_grid(PERIOD~TYPE, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
BEQR_theme()+
theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 5
plot_insulin(df=beqrdata%>%filter(ID==1), id = "ID", visit = "PERIOD", idv = "TAD", form = "TREATMENT", dv=list(CONC="CONC"), ylab = "Concentration (ng/mL)", xlab = "Time(hrs)")+
facet_grid(PERIOD~TYPE, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))
# Chunk 6
plot_insulin(df=beqrdata%>%filter(ID==1, TYPE=="INSULIN", PERIOD==1), id = "ID", visit = "PERIOD", idv = "TAD", form = "TREATMENT", dv=list(CONC="CONC"), ylab = "Concentration (ng/mL)", xlab = "Time(hrs)")
# Chunk 7
beqrdata_adj<-beqrdata%>%group_by(ID,PERIOD)%>%do(adjust_insulin(., idv = "TAD", dosing_time = 0.001, dv="CONC", dv_type = "TYPE", dv_type_values = list(INSULIN = "INSULIN", CPEPTIDE = "CPEPTIDE")))%>%ungroup()
# Chunk 8
base_mean_plot(df = beqrdata_adj%>%filter(INCLUDED=="YES"), treatment = "TREATMENT", time = "TAD", dv = "INSULIN_ADJ")+
labs(x = "TIME", y="Adjusted insulin conc(ng/mL)")+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
facet_grid(.~PERIOD, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
BEQR_theme()+
theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 9
ggplot(data = beqrdata_adj%>%filter(INCLUDED=="YES"), aes(x=TAD, y=INSULIN_ADJ, group=factor(ID)))+
geom_point(aes(color=TREATMENT),size=3, show.legend = FALSE)+
geom_line(aes(color=TREATMENT),size=1, show.legend = FALSE)+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(x="Time (hours)", y = "adjusted Insulin Concentrations (ng/mL)")+
facet_grid(.~TREATMENT)+
PKPDmisc::base_theme()+
BEQR::BEQR_theme()+
theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 10
descInsulin<-beqrdata_adj%>%filter(TAD>0)%>%group_by(TREATMENT,PERIOD,TAD)%>%do(summarize_statz(., group = "TREATMENT", variables = c("INSULIN_ADJ")))%>%ungroup()
# Chunk 11
pddata<-read.csv("../data/beqrpddataset.csv", stringsAsFactors = FALSE)
pddata<-pddata%>%filter(!is.na(TIME))
# Chunk 12
pddata<-pddata%>%mutate(CLOCK = ifelse(nchar(TIME)==1, paste0("000",TIME),
ifelse(nchar(TIME)==2, paste0("00", TIME),
ifelse(nchar(TIME)==3, paste0("0", TIME), TIME))))
# Chunk 13
pddata<-pddata%>%mutate(CLOCK = str_panctuate(CLOCK, 2, ":"))
# Chunk 14
pddata<-pddata%>%mutate(DATE = dmy("15-06-2000"))
# Chunk 15
pddata<-pddata%>%group_by(ID,PERIOD)%>%filter(!is.na(TIME))%>%
do(edit_Date(., condition_col = "TIME", date_col = "DATE"))%>%ungroup()
# A date-time is required to calculate time after dose
pddata<-pddata%>%mutate(DATETIME=paste(DATE, CLOCK, sep=" "))%>%
mutate(CLOCKTIME=ymd_hm(DATETIME))
# Get time after dose
pddata<-pddata%>%arrange(ID,PERIOD,CLOCKTIME)%>%group_by(ID,PERIOD)%>%
mutate(TAD=as.numeric(round(difftime(CLOCKTIME, first(CLOCKTIME), units = "min"),6)),
GCLAMP=first(GLUCOSE)-9)%>%ungroup() # A clamp value is need for plotting glucose profile
##Select relevant columns
pddata<-pddata%>%select(ID,PERIOD,TIME,TAD,SEQUENCE,TREATMENT,GIR,GLUCOSE,GCLAMP)
# Chunk 16
#Round up time to multiples of 5
pddata<-pddata%>%mutate(RTAD=ifelse(TAD<12*60, custom_round(TAD, 5, 2.5), custom_round(TAD, 10, 5)))
#Change time to hours
pddata<-pddata%>%mutate(RTAD=round(RTAD/60,3))
##Make TIME BINS for plotting mean profiles
pddata<-pddata%>%mutate(TIMEBIN=set_bins(RTAD, breaks = c(3/60, seq(4.9/60, 24, 9.9/60))))
#Get mean time within the time bin
pddata<-pddata%>%group_by(ID, PERIOD, TIMEBIN)%>%mutate(MEANTAD = mean(RTAD, na.rm = TRUE))%>%ungroup()
# Chunk 17
ggplot(data=pddata, aes(RTAD, GIR, group=ID))+
geom_line(aes(colour=TREATMENT))+
geom_point(aes(colour=TREATMENT))+
facet_grid(PERIOD~TREATMENT, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(y="Glucose infusion rate (mL/hr)",x="Time (hours)")+
BEQR_theme()+theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 18
##Plot mean profiles
ggplot(data = pddata, aes(x=RTAD, y=GIR, color=TREATMENT))+
stat_summary(fun.y = function(x)(mean(x, na.rm = TRUE)), geom = "point", size=3)+
stat_summary(fun.y = function(x)(mean(x, na.rm = TRUE)), geom = "line", size=1)+
#stat_summary(fun.data = function(x){data.frame(ymin=mean(x)-1.96*se(x), ymax=mean(x)+1.96*se(x))}, geom = "errorbar", width=1)+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(x="Time (hours)", y = "Glucose infusion rate (mL/hr)")+
facet_grid(.~PERIOD, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
BEQR_theme()+theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 19
pddata<-pddata%>%group_by(ID,PERIOD)%>%do(get_smooth_dv(., idv = "TAD", dv= "GIR", span = 0.2))
# Chunk 20
base_mean_plot(df=pddata, treatment = "TREATMENT", time = "RTAD", dv = "smooth_dv")+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(x="Time (hours)", y = "Glucose infusion rate (mL/hr)")+
facet_grid(.~PERIOD, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
BEQR_theme()+theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 21
demographics<-read.csv("../data/beqrdemographic.csv", stringsAsFactors = FALSE)
# Chunk 22
tab_char<-table_characteristics(vars = c("GENDER", "AGE", "WEIGHT"), strata = c("SEQUENCE", "TREATMENT"), includeNA = TRUE, data = demographics)
# Chunk 23
insulinpk<-beqrdata%>%
filter(TYPE=="INSULIN", !TIME%in%c("-30min","-20min","-10min"))%>%
select(ID,TREATMENT,PERIOD,SEQUENCE,TIME=TAD,CONC)
# Chunk 24
# Method can be linear or log linear (default). Linear was chosen as required in FDA guidance
PKNCA.options(auc.method="linear")
# Check if method is set
PKNCA.options(name = "auc.method")
# Chunk 25: report_setup
# We need names of NCA parameters computed by PKNCA
ncaparams<-names(get.interval.cols())[-c(1,2)]
# Create partial AUC dummy dataset based on names of nca params obtained.
partialauc<-make_nca_par_dataset(nca_params = c("cmax","tmax","aumclast", "lambda.z","half.life","aucpext.obs"),
partial_aucs = list(start=c(0,0,0), end=c(4, 6, 12)),
protocol_tlast = 24,
compute_aucinf = TRUE)
# Chunk 26
#Dose was 0.4IU/Kg. Any dose value can be used since CL will not be computed.
dose<-make_nca_dose_dataset(df = insulinpk, treatment_var = TREATMENT, id_var = ID, time_var = TIME, dose = 1, dose_time = 0, tau = 24)
# Chunk 27
# Create Conc object
myconc<-PKNCAconc(insulinpk, formula = CONC~TIME|TREATMENT+ID,
labels = c(TIME="Time (hrs)", CONC="Concentration (ng/mL)"),
units = c(TIME="hrs", CONC="ng/mL"))
# The create the dose object
mydose<-PKNCAdose(dose, formula = DOSE~TIME|TREATMENT+ID, units=c(DOSE="ng", TIME="hrs"), route="extravascular")
# Create data object
mydata<-PKNCAdata(myconc, mydose, intervals=partialauc)
# Chunk 28
myresults<-pk.nca(mydata)
# Chunk 29
#Extact calculated PK parameters
results_wide_pk<-extract_nca_results(myresults, select_nca_param = c("auclast", "aucinf.obs","cmax","tmax","aumclast", "lambda.z","half.life","aucpext.obs"))
# Chunk 30
#Summarize
nca_summary<-summarize_statz(results_wide_pk, group = "TREATMENT", variables = c("auclast0_4", "auclast0_6", "auclast0_24", "aucinf.obs0_Inf","cmax0_24"))
# Chunk 31
# This will give errors because for some subjects dont have values for both test and treatment
tmaxthalf<-table_median_tmax_thalf(results_wide_pk, group = "TREATMENT", tmax = "tmax0_24", thalf = "half.life0_24")
results_wide_pairs<-results_wide_pk%>%group_by(ID)%>%mutate(N=n())%>%ungroup()%>%filter(N==2)%>%select(-N)
# This return expected results
tmaxthalf<-table_median_tmax_thalf(results_wide_pairs, group = "TREATMENT", tmax = "tmax0_24", thalf = "half.life0_24")
# Chunk 32
# Negative values of the smooth DV have to be replaced by 0
insulinpd<-pddata%>%mutate(SMOOTHGIR=ifelse(smooth_dv<0,0,smooth_dv), TIME=TAD/60)%>%select(ID, PERIOD, SEQUENCE,TREATMENT, TIME, SMOOTHGIR,GIR)
# Chunk 33
# Create Conc object
mypd<-PKNCAconc(insulinpd, formula = SMOOTHGIR~TIME|TREATMENT+ID,
labels = c(TIME="Time (hrs)", CONC="Infusion rate (mL/hour)"),
units = c(TIME="hrs", CONC="mL/hour"))
# The create the dose object
mydose<-PKNCAdose(dose, formula = DOSE~TIME|TREATMENT+ID, units=c(DOSE="ng", TIME="hrs"), route="extravascular")
# Create data object
myPDdata<-PKNCAdata(mypd, mydose, intervals=partialauc)
# Chunk 34
myPDresults<-pk.nca(myPDdata)
# Chunk 35
#Extact calculated PK parameters
results_wide_pd<-extract_nca_results(myPDresults, select_nca_param = c("auclast","cmax","tmax", "half.life"))
# Chunk 36
#Summarize
nca_summary_pd<-summarize_statz(results_wide_pd, group = "TREATMENT", variables = c("auclast0_4", "auclast0_6", "auclast0_24","cmax0_24"))
# Chunk 37
results_wide_pairs_pd<-results_wide_pd%>%group_by(ID)%>%mutate(N=n())%>%ungroup()%>%filter(N==2)%>%select(-N)
# This return expected results
pd_tmax_median<-table_median_tmax(results_wide_pairs_pd, group = "TREATMENT", tmax = "tmax0_24")
# Chunk 1
#knitr::opts_chunk$set(eval = FALSE, echo = FALSE, warning = FALSE, message = FALSE)
# Chunk 2
libraries<-c("tidyverse", "readxl", "PKPDmisc", "PKNCA","tableone", "lubridate", "BEQR")
loadlibraries<-lapply(libraries, require, character.only=TRUE)
rm(loadlibraries, libraries)
devtools::load_all()
# Chunk 3
beqrdata<-read.csv("../data/beqrpkdataset.csv", stringsAsFactors = FALSE)
# Chunk 4
base_mean_plot(df=beqrdata, treatment = "TREATMENT", time = "TAD", dv = "CONC")+
labs(x = "TIME", y="Conc(ng/mL)")+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(x="Time (hours)", y = "Concentrations (ng/mL)")+
facet_grid(PERIOD~TYPE, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
BEQR_theme()+
theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 5
plot_insulin(df=beqrdata%>%filter(ID==1), id = "ID", visit = "PERIOD", idv = "TAD", form = "TREATMENT", dv=list(CONC="CONC"), ylab = "Concentration (ng/mL)", xlab = "Time(hrs)")+
facet_grid(PERIOD~TYPE, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))
# Chunk 6
plot_insulin(df=beqrdata%>%filter(ID==1, TYPE=="INSULIN", PERIOD==1), id = "ID", visit = "PERIOD", idv = "TAD", form = "TREATMENT", dv=list(CONC="CONC"), ylab = "Concentration (ng/mL)", xlab = "Time(hrs)")
# Chunk 7
beqrdata_adj<-beqrdata%>%group_by(ID,PERIOD)%>%do(adjust_insulin(., idv = "TAD", dosing_time = 0.001, dv="CONC", dv_type = "TYPE", dv_type_values = list(INSULIN = "INSULIN", CPEPTIDE = "CPEPTIDE")))%>%ungroup()
# Chunk 8
base_mean_plot(df = beqrdata_adj%>%filter(INCLUDED=="YES"), treatment = "TREATMENT", time = "TAD", dv = "INSULIN_ADJ")+
labs(x = "TIME", y="Adjusted insulin conc(ng/mL)")+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
facet_grid(.~PERIOD, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
BEQR_theme()+
theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 9
ggplot(data = beqrdata_adj%>%filter(INCLUDED=="YES"), aes(x=TAD, y=INSULIN_ADJ, group=factor(ID)))+
geom_point(aes(color=TREATMENT),size=3, show.legend = FALSE)+
geom_line(aes(color=TREATMENT),size=1, show.legend = FALSE)+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(x="Time (hours)", y = "adjusted Insulin Concentrations (ng/mL)")+
facet_grid(.~TREATMENT)+
PKPDmisc::base_theme()+
BEQR::BEQR_theme()+
theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 10
descInsulin<-beqrdata_adj%>%filter(TAD>0)%>%group_by(TREATMENT,PERIOD,TAD)%>%do(summarize_statz(., group = "TREATMENT", variables = c("INSULIN_ADJ")))%>%ungroup()
# Chunk 11
pddata<-read.csv("../data/beqrpddataset.csv", stringsAsFactors = FALSE)
pddata<-pddata%>%filter(!is.na(TIME))
# Chunk 12
pddata<-pddata%>%mutate(CLOCK = ifelse(nchar(TIME)==1, paste0("000",TIME),
ifelse(nchar(TIME)==2, paste0("00", TIME),
ifelse(nchar(TIME)==3, paste0("0", TIME), TIME))))
# Chunk 13
pddata<-pddata%>%mutate(CLOCK = str_panctuate(CLOCK, 2, ":"))
# Chunk 14
pddata<-pddata%>%mutate(DATE = dmy("15-06-2000"))
# Chunk 15
pddata<-pddata%>%group_by(ID,PERIOD)%>%filter(!is.na(TIME))%>%
do(edit_Date(., condition_col = "TIME", date_col = "DATE"))%>%ungroup()
# A date-time is required to calculate time after dose
pddata<-pddata%>%mutate(DATETIME=paste(DATE, CLOCK, sep=" "))%>%
mutate(CLOCKTIME=ymd_hm(DATETIME))
# Get time after dose
pddata<-pddata%>%arrange(ID,PERIOD,CLOCKTIME)%>%group_by(ID,PERIOD)%>%
mutate(TAD=as.numeric(round(difftime(CLOCKTIME, first(CLOCKTIME), units = "min"),6)),
GCLAMP=first(GLUCOSE)-9)%>%ungroup() # A clamp value is need for plotting glucose profile
##Select relevant columns
pddata<-pddata%>%select(ID,PERIOD,TIME,TAD,SEQUENCE,TREATMENT,GIR,GLUCOSE,GCLAMP)
# Chunk 16
#Round up time to multiples of 5
pddata<-pddata%>%mutate(RTAD=ifelse(TAD<12*60, custom_round(TAD, 5, 2.5), custom_round(TAD, 10, 5)))
#Change time to hours
pddata<-pddata%>%mutate(RTAD=round(RTAD/60,3))
##Make TIME BINS for plotting mean profiles
pddata<-pddata%>%mutate(TIMEBIN=set_bins(RTAD, breaks = c(3/60, seq(4.9/60, 24, 9.9/60))))
#Get mean time within the time bin
pddata<-pddata%>%group_by(ID, PERIOD, TIMEBIN)%>%mutate(MEANTAD = mean(RTAD, na.rm = TRUE))%>%ungroup()
# Chunk 17
ggplot(data=pddata, aes(RTAD, GIR, group=ID))+
geom_line(aes(colour=TREATMENT))+
geom_point(aes(colour=TREATMENT))+
facet_grid(PERIOD~TREATMENT, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(y="Glucose infusion rate (mL/hr)",x="Time (hours)")+
BEQR_theme()+theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 18
##Plot mean profiles
ggplot(data = pddata, aes(x=RTAD, y=GIR, color=TREATMENT))+
stat_summary(fun.y = function(x)(mean(x, na.rm = TRUE)), geom = "point", size=3)+
stat_summary(fun.y = function(x)(mean(x, na.rm = TRUE)), geom = "line", size=1)+
#stat_summary(fun.data = function(x){data.frame(ymin=mean(x)-1.96*se(x), ymax=mean(x)+1.96*se(x))}, geom = "errorbar", width=1)+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(x="Time (hours)", y = "Glucose infusion rate (mL/hr)")+
facet_grid(.~PERIOD, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
BEQR_theme()+theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 19
pddata<-pddata%>%group_by(ID,PERIOD)%>%do(get_smooth_dv(., idv = "TAD", dv= "GIR", span = 0.2))
# Chunk 20
base_mean_plot(df=pddata, treatment = "TREATMENT", time = "RTAD", dv = "smooth_dv")+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(x="Time (hours)", y = "Glucose infusion rate (mL/hr)")+
facet_grid(.~PERIOD, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
BEQR_theme()+theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
# Chunk 21
demographics<-read.csv("../data/beqrdemographic.csv", stringsAsFactors = FALSE)
# Chunk 22
tab_char<-table_characteristics(vars = c("GENDER", "AGE", "WEIGHT"), strata = c("SEQUENCE", "TREATMENT"), includeNA = TRUE, data = demographics)
# Chunk 23
insulinpk<-beqrdata%>%
filter(TYPE=="INSULIN", !TIME%in%c("-30min","-20min","-10min"))%>%
select(ID,TREATMENT,PERIOD,SEQUENCE,TIME=TAD,CONC)
# Chunk 24
# Method can be linear or log linear (default). Linear was chosen as required in FDA guidance
PKNCA.options(auc.method="linear")
# Check if method is set
PKNCA.options(name = "auc.method")
# Chunk 25: report_setup
# We need names of NCA parameters computed by PKNCA
ncaparams<-names(get.interval.cols())[-c(1,2)]
# Create partial AUC dummy dataset based on names of nca params obtained.
partialauc<-make_nca_par_dataset(nca_params = c("cmax","tmax","aumclast", "lambda.z","half.life","aucpext.obs"),
partial_aucs = list(start=c(0,0,0), end=c(4, 6, 12)),
protocol_tlast = 24,
compute_aucinf = TRUE)
# Chunk 26
#Dose was 0.4IU/Kg. Any dose value can be used since CL will not be computed.
dose<-make_nca_dose_dataset(df = insulinpk, treatment_var = TREATMENT, id_var = ID, time_var = TIME, dose = 1, dose_time = 0, tau = 24)
# Chunk 27
# Create Conc object
myconc<-PKNCAconc(insulinpk, formula = CONC~TIME|TREATMENT+ID,
labels = c(TIME="Time (hrs)", CONC="Concentration (ng/mL)"),
units = c(TIME="hrs", CONC="ng/mL"))
# The create the dose object
mydose<-PKNCAdose(dose, formula = DOSE~TIME|TREATMENT+ID, units=c(DOSE="ng", TIME="hrs"), route="extravascular")
# Create data object
mydata<-PKNCAdata(myconc, mydose, intervals=partialauc)
# Chunk 28
myresults<-pk.nca(mydata)
# Chunk 29
#Extact calculated PK parameters
results_wide_pk<-extract_nca_results(myresults, select_nca_param = c("auclast", "aucinf.obs","cmax","tmax","aumclast", "lambda.z","half.life","aucpext.obs"))
# Chunk 30
#Summarize
nca_summary<-summarize_statz(results_wide_pk, group = "TREATMENT", variables = c("auclast0_4", "auclast0_6", "auclast0_24", "aucinf.obs0_Inf","cmax0_24"))
# Chunk 31
# This will give errors because for some subjects dont have values for both test and treatment
tmaxthalf<-table_median_tmax_thalf(results_wide_pk, group = "TREATMENT", tmax = "tmax0_24", thalf = "half.life0_24")
results_wide_pairs<-results_wide_pk%>%group_by(ID)%>%mutate(N=n())%>%ungroup()%>%filter(N==2)%>%select(-N)
# This return expected results
tmaxthalf<-table_median_tmax_thalf(results_wide_pairs, group = "TREATMENT", tmax = "tmax0_24", thalf = "half.life0_24")
# Chunk 32
# Negative values of the smooth DV have to be replaced by 0
insulinpd<-pddata%>%mutate(SMOOTHGIR=ifelse(smooth_dv<0,0,smooth_dv), TIME=TAD/60)%>%select(ID, PERIOD, SEQUENCE,TREATMENT, TIME, SMOOTHGIR,GIR)
# Chunk 33
# Create Conc object
mypd<-PKNCAconc(insulinpd, formula = SMOOTHGIR~TIME|TREATMENT+ID,
labels = c(TIME="Time (hrs)", CONC="Infusion rate (mL/hour)"),
units = c(TIME="hrs", CONC="mL/hour"))
# The create the dose object
mydose<-PKNCAdose(dose, formula = DOSE~TIME|TREATMENT+ID, units=c(DOSE="ng", TIME="hrs"), route="extravascular")
# Create data object
myPDdata<-PKNCAdata(mypd, mydose, intervals=partialauc)
# Chunk 34
myPDresults<-pk.nca(myPDdata)
# Chunk 35
#Extact calculated PK parameters
results_wide_pd<-extract_nca_results(myPDresults, select_nca_param = c("auclast","cmax","tmax", "half.life"))
# Chunk 36
#Summarize
nca_summary_pd<-summarize_statz(results_wide_pd, group = "TREATMENT", variables = c("auclast0_4", "auclast0_6", "auclast0_24","cmax0_24"))
# Chunk 37
results_wide_pairs_pd<-results_wide_pd%>%group_by(ID)%>%mutate(N=n())%>%ungroup()%>%filter(N==2)%>%select(-N)
# This return expected results
pd_tmax_median<-table_median_tmax(results_wide_pairs_pd, group = "TREATMENT", tmax = "tmax0_24")
results_wide_pk<-results_wide_pk%>%mutate_at(.vars = c("PERIOD", "TREATMENT", "SEQUENCE"), .funs = as.factor)
fit_cmax<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = cmax0_24, reference = "REFERENCE")
rm(get_abe_bylme)
devtools::load_all()
fit_cmax<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = cmax0_24, reference = "REFERENCE")
fit_cmax<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = cmax0_24, reference = "REFERENCE")
devtools::load_all()
fit_cmax<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = cmax0_24, reference = "REFERENCE")
ABEcmax<-fit_cmax$ABEresult
fit_auc24<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = auclast0_24, reference = "REFERENCE")
ABEauc24<-fit_auc24$ABEresult
results<-bind_rows(ABEcmax, ABEauc24)
knitr::kable(results)
View(nca_summary_pd)
View(nca_summary)
fit_auc24<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = auclast0_24, reference = "REFERENCE")
ABEauc24<-fit_auc24$ABEresult
View(ABEauc24)
fitmodel<-fit_auc24$lmefit
names(fitmodel)
fitmodel$coefficients
exp(-2.5)
devtools::load_all()
fit_auc24<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = auclast0_24, reference = "REFERENCE")
ABEauc24<-fit_auc24$ABEresult
View(ABEauc24)
fit_cmax<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = cmax0_24, reference = "REFERENCE")
ABEcmax<-fit_cmax$ABEresult
fit_auc24<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = auclast0_24, reference = "REFERENCE")
ABEauc24<-fit_auc24$ABEresult
results<-bind_rows(ABEcmax, ABEauc24)
knitr::kable(results)
results_wide_pd<-results_wide_pd%>%mutate_at(.vars = c("PERIOD", "TREATMENT", "SEQUENCE"), .funs = as.factor)
fit_girmax<-get_abe_bylme(data = results_wide_pd, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = cmax0_24, reference = "REFERENCE")
ABEgirmax<-fit_girmax$ABEresult
fit_girauc24<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = auclast0_24, reference = "REFERENCE")
ABEgirauc24<-fit_girauc24$ABEresult
girresults<-bind_rows(ABEgirmax, ABEgirauc24)
knitr::kable(girresults)
View(girresults)
View(ABEcmax)
View(ABEauc24)
ABEcmax<-fit_cmax$ABEresult
View(ABEcmax)
names(girresults)
ABEcmax<-ABEcmax%>%mutate(PARAMETERS = "Cmax")%>%select(PARAMETERS,GMR:WSV...)
View(ABEcmax)
ABEauc24<-ABEauc24%>%mutate(PARAMETERS = "AUC0-24")%>%select(PARAMETERS, GMR:WSV...)
results<-bind_rows(ABEcmax, ABEauc24)
knitr::kable(results)
devtools::load_all()
fit_girmax<-get_abe_bylme(data = results_wide_pd, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = cmax0_24, reference = "REFERENCE")
ABEgirmax<-fit_girmax$ABEresult
ABEgirmax<-ABEgirmax%>%mutate(PARAMETERS = "GIRmax")%>%select(PARAMETERS,GMR:WSV)
fit_girauc24<-get_abe_bylme(data = results_wide_pk, treatments = TREATMENT, sequences = SEQUENCE, periods = PERIOD, idvar = ID, abe_param = auclast0_24, reference = "REFERENCE")
ABEgirauc24<-fit_girauc24$ABEresult
ABEgirauc24<-ABEgirauc24%>%mutate(PARAMETERS = "GIRAUC0-24")%>%select(PARAMETERS, GMR:WSV)
girresults<-bind_rows(ABEgirmax, ABEgirauc24)
knitr::kable(girresults)
devtools::load_all()
factor()
factor("ab")
stringr::str_length(factor("ab"))
testthat::expect_equal(10,10+1*e-7)
testthat::expect_equal(10,10+1*exp(-7))
1e-7
testthat::expect_equal(10,10+1e-7)
a<-list(1:10, letters)
str(a)
testthat::expect_output(str(a), "List of 2")
testthat::expect_warning(log(-1))
testthat::expect_error(log(-1))
model = lm(mpg~wt, data = mtcars)
inherits(model)
inherits(model, what = "lm")
inherits(model, what = "glm")
inherits(model, what = "lm", which = TRUE)
inherits(model, what = c("lm", "glm"), which = TRUE)
class(model)
testthat::expect_is(model, "lm")
head(beqrdata, 5)
knitr::kable(head(beqrdata, 5))
knitr::kable(head(beqrdata_adj,5))
knitr::kable(head(beqrdata_adj,10))
knitr::kable(head(descInsulin, 5))
knitr::kable(head(pddata, 5))
knitr::kable(head(pddata, 10))
base_mean_plot(df=pddata, treatment = "TREATMENT", time = "RTAD", dv = "smooth_dv")+
scale_color_manual(name=NULL, values = c("REFERENCE" = "red", "TEST" = "blue"))+
labs(x="Time (hours)", y = "Glucose infusion rate (mL/hr)")+
facet_grid(.~PERIOD, labeller = labeller(PERIOD=c("1"="Period 1", "2"= "Period 2")))+
BEQR_theme()+theme(legend.position = "bottom", legend.key.width = unit(1, "cm"), legend.margin = margin(0,0,0,0))
libraries<-c("tidyverse", "readxl", "PKPDmisc", "PKNCA","tableone", "lubridate")
loadlibraries<-lapply(libraries, require, character.only=TRUE)
rm(loadlibraries, libraries)
devtools::load_all()
ggplot(pddata%>%filter(ID==1), aes(x=TAD, y=GIR))+geom_line()
ggplot(pddata%>%filter(ID==1), aes(x=TAD, y=GIR))+
geom_line()+
geom_line(aes(y=smooth_dv), color="red")
ggplot(pddata%>%filter(ID==1), aes(x=TAD, y=GIR))+
geom_line()+
geom_line(aes(y=smooth_dv), color="red")+
BEQR_theme()
ggplot(pddata%>%filter(ID==1), aes(x=TAD, y=GIR))+
geom_line()+
geom_line(aes(y=smooth_dv), color="red")+
facet_grid(.~TREATMENT)+
BEQR_theme()
knitr::kable(tab_char)
knitr::kable(nca_summary_pd)
knitr::kable(nca_summary_pd, digits = 1)
knitr::kable(nca_summary, digits = 1)
knitr::kable(tmaxthalf)
knitr::kable(pd_tmax_median)
##Add dependent packages
devtools::use_package(package = "rlang")
devtools::use_package(package = "reshape2")
devtools::use_package(package = "tidyverse")
devtools::use_package(package = "nlme")
devtools::use_package(package = "grid")
devtools::use_package(package = "glue")
devtools::use_package(package = "tableone")
devtools::use_package(package = "GGally")
devtools::use_package(package = "PKPDmisc")
x<-letters[sample(10,5)]
x<-letters[sample(10,5)]
y<-letters[sample(10,5)]
setdiff(x,y)
y%in%x
x[y%in%x]
x[x%in%y]
x[!x%in%y]
##Add dependent packages
devtools::use_package(package = "rlang")
getwd()
overview<-readLines(con = "vignettes/beqr_overview.Rmd")
overview
demog<-read.csv("data-raw/beqrdemographic.csv")
View(demog)
usethis::use_data(demog, overwrite = TRUE)
beqrdemographic<-read.csv("data-raw/beqrdemographic.csv")
usethis::use_data(beqrdemographic, overwrite = TRUE)
beqrpddataset<-read.csv("data-raw/beqrpddataset.csv")
View(beqrpddataset)
usethis::use_data(beqrpddataset, overwrite = TRUE)
beqrpkdataset<-read.csv("data-raw/beqrpkdataset.csv")
View(beqrpkdataset)
usethis::use_data(beqrpkdataset, overwrite = TRUE)
usethis::use_data_raw(beqrpkdataset, overwrite = TRUE)
usethis::use_data_raw()
beqrdemographic<-read.csv("data-raw/beqrdemographic.csv")
View(beqrdemographic)
length(unique(beqrdemographic$ID))
dim(beqrdemographic)
dput(names(demog))
View(beqrdemographic)
View(beqrpddataset)
dim(beqrpddataset)
dput(names(beqrpddataset))
View(beqrpkdataset)
dim(beqrpkdataset)
dput(names(beqrpkdataset))
getwd()
##Document functions
setwd("~/GitHub")
devtools::document(pkg = "BEQR")
devtools::use_vignette("BEQR_Overview")
setwd("~/GitHub/BEQR")
devtools::use_vignette("BEQR_Overview")
